# -*- coding: utf-8 -*-
"""mlproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h30WebqfJXc6LpgZevXlz9_Bi28WvjZe
"""

# spam_detector_final.py

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import string
import re
import nltk
import joblib
import os

from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Download stopwords
nltk.download('stopwords')

# -----------------------------
# 1. Load Dataset
# -----------------------------
df = pd.read_csv("/content/SMSSpamCollection", sep='\t', names=["label", "message"])

# -----------------------------
# 2. Preprocessing
# -----------------------------
def clean_text(text):
    text = text.lower()
    text = re.sub(r'\d+', '', text)  # Remove numbers
    text = text.translate(str.maketrans('', '', string.punctuation))  # Remove punctuation
    text = text.strip()
    stop_words = set(stopwords.words('english'))
    text = " ".join([word for word in text.split() if word not in stop_words])
    return text

df['cleaned'] = df['message'].apply(clean_text)

# -----------------------------
# 3. Visualize Class Distribution
# -----------------------------
plt.figure(figsize=(6, 4))
sns.countplot(x='label', data=df, palette='pastel')
plt.title('Distribution of Spam and Ham Messages')
plt.xlabel('Message Type')
plt.ylabel('Count')
plt.tight_layout()
plt.show()

# -----------------------------
# 4. Train-Test Split
# -----------------------------
X_train, X_test, y_train, y_test = train_test_split(df['cleaned'], df['label'], test_size=0.2, random_state=42)

# -----------------------------
# 5. TF-IDF Vectorization
# -----------------------------
vectorizer = TfidfVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# -----------------------------
# 6. Model Training
# -----------------------------
model = LogisticRegression()
model.fit(X_train_vec, y_train)

# -----------------------------
# 7. Evaluation
# -----------------------------
y_pred = model.predict(X_test_vec)

acc = accuracy_score(y_test, y_pred)
print(f"\n‚úÖ Accuracy: {acc:.4f}")
print("\n‚úÖ Classification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(5, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Ham', 'Spam'], yticklabels=['Ham', 'Spam'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.tight_layout()
plt.show()

# -----------------------------
# 8. Save Model & Vectorizer
# -----------------------------
os.makedirs('model', exist_ok=True)
joblib.dump(model, 'model/spam_model.pkl')
joblib.dump(vectorizer, 'model/vectorizer.pkl')
print("‚úÖ Model and vectorizer saved in 'model/' folder.")

# -----------------------------
# 9. Prediction Function
# -----------------------------
def predict_message(msg):
    cleaned = clean_text(msg)
    vector = vectorizer.transform([cleaned])
    prediction = model.predict(vector)[0]
    return prediction

# -----------------------------
# 10. Example Prediction
# -----------------------------
sample = "Ok lar... Joking wif u oni..."
print(f"\nüì© Test message: {sample}")
print(f"üîç Prediction: {predict_message(sample)}")